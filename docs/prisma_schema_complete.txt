// ULKS E-Commerce Dashboard - Complete Prisma Schema
// MongoDB Database Schema for E-Commerce Platform
// This schema includes all core functionality plus homepage customization features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ===========================
// 1. CORE BUSINESS LOGIC (Users, Customers, Roles)
// ===========================

model Role {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  roleName       String @unique @map("role_name")
  hierarchyLevel Int    @unique @map("hierarchy_level") // 1=Super Admin, 2=Admin, 3=Store Manager, 4=Editor
  
  // Relations
  users User[]
  
  @@map("roles")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  roleId      String    @map("role_id") @db.ObjectId
  name        String
  email       String    @unique
  passwordHash String   @map("password_hash")
  status      UserStatus @default(ACTIVE)
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  role        Role @relation(fields: [roleId], references: [id])
  activityLogs ActivityLog[]
  
  @@map("users")
}

model Customer {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  phone        String?
  passwordHash String    @map("password_hash")
  createdAt    DateTime  @default(now()) @map("created_at")
  
  // Relations
  addresses Address[]
  orders    Order[]
  
  @@map("customers")
}

model Address {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String      @map("customer_id") @db.ObjectId
  addressType AddressType @map("address_type")
  isDefault   Boolean     @default(false) @map("is_default")
  street      String
  city        String
  state       String
  zipCode     String      @map("zip_code")
  country     String
  
  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

// ===========================
// 2. PRODUCT & CATALOG MANAGEMENT
// ===========================

model Category {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  slug      String @unique
  iconClass String? @map("icon_class") // FontAwesome icon class
  
  // Relations
  products Product[]
  
  @@map("categories")
}

model Product {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  categoryId   String        @map("category_id") @db.ObjectId
  name         String
  sku          String        @unique
  description  String?
  regularPrice Float         @map("regular_price")
  salePrice    Float?        @map("sale_price")
  stockQuantity Int          @default(0) @map("stock_quantity")
  status       ProductStatus @default(IN_STOCK)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  
  // Relations
  category     Category @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  orderItems   OrderItem[]
  
  @@map("products")
}

model ProductImage {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  productId      String  @map("product_id") @db.ObjectId
  imagePath      String  @map("image_path")
  isPrimaryImage Boolean @default(false) @map("is_primary_image")
  
  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

// ===========================
// 3. ORDERS & FULFILLMENT
// ===========================

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String        @map("customer_id") @db.ObjectId
  orderDate       DateTime      @default(now()) @map("order_date")
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  subtotal        Float
  taxAmount       Float         @default(0) @map("tax_amount")
  shippingAmount  Float         @default(0) @map("shipping_amount")
  totalAmount     Float         @map("total_amount")
  shippingAddress Json          @map("shipping_address") // Store complete address as JSON
  billingAddress  Json          @map("billing_address")  // Store complete address as JSON
  shippingCarrier String?       @map("shipping_carrier")
  trackingNumber  String?       @map("tracking_number")
  notes           String?
  
  // Relations
  customer   Customer @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  orderId               String @map("order_id") @db.ObjectId
  productId             String @map("product_id") @db.ObjectId
  quantity              Int
  priceAtPurchase       Float  @map("price_at_purchase")
  productNameAtPurchase String @map("product_name_at_purchase")
  
  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// ===========================
// 4. APPLICATION SUPPORT
// ===========================

model Setting {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  settingKey   String @unique @map("setting_key")
  settingValue String @map("setting_value") // Store as JSON string for complex values
  
  @@map("settings")
}

model ActivityLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  actionType  String   @map("action_type")
  description String
  timestamp   DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@map("activity_log")
}

// ===========================
// 5. HOMEPAGE CUSTOMIZATION FEATURES
// ===========================

model Slider {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imagePath   String   @map("image_path")
  linkUrl     String?  @map("link_url")
  buttonText  String?  @map("button_text")
  order       Int      @default(0) // For ordering slides
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("sliders")
}

model Banner {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imagePath   String         @map("image_path")
  linkUrl     String?        @map("link_url")
  buttonText  String?        @map("button_text")
  position    BannerPosition @default(TOP) // TOP, MIDDLE, BOTTOM, SIDEBAR
  isActive    Boolean        @default(true) @map("is_active")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  
  @@map("banners")
}

model SiteCustomization {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  logoPath        String?  @map("logo_path")
  primaryColor    String   @default("#3B82F6") @map("primary_color")    // Blue
  secondaryColor  String   @default("#10B981") @map("secondary_color")  // Green
  accentColor     String   @default("#F59E0B") @map("accent_color")     // Yellow
  textColor       String   @default("#1F2937") @map("text_color")       // Dark Gray
  backgroundColor String   @default("#FFFFFF") @map("background_color") // White
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("site_customization")
}

// ===========================
// ENUMS
// ===========================

enum UserStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum AddressType {
  BILLING  @map("billing")
  SHIPPING @map("shipping")
}

enum ProductStatus {
  IN_STOCK     @map("in_stock")
  OUT_OF_STOCK @map("out_of_stock")
  LOW_STOCK    @map("low_stock")
}

enum OrderStatus {
  PENDING    @map("pending")
  PROCESSING @map("processing")
  SHIPPED    @map("shipped")
  COMPLETED  @map("completed")
  CANCELLED  @map("cancelled")
  REFUNDED   @map("refunded")
}

enum PaymentStatus {
  PAID    @map("paid")
  PENDING @map("pending")
  FAILED  @map("failed")
}

enum BannerPosition {
  TOP     @map("top")
  MIDDLE  @map("middle")
  BOTTOM  @map("bottom")
  SIDEBAR @map("sidebar")
}